Index: nmrutils/isotropicreader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport os\nfrom os import path\nimport glob\n# import datetime\nclass Level_ot: #Level of theory\n    def __init__(self, opt_fun,opt_base, nmr_fun, nmr_base, dispersion, solv_model, solvent):\n        self.of=opt_fun\n        self.ob=opt_base\n        self.nf=nmr_fun\n        self.nb= nmr_base\n        self.d=dispersion\n        self.sm=solv_model\n        self.sl=solvent\n\nclass AtomNMR:\n    def __init__(self,num_in_mol,atomic_symbol,signal_exp, signal_theo, residuo, correccion):\n        self.nz=num_in_mol\n        self.s=atomic_symbol\n        self.e=signal_exp\n        self.t=signal_theo\n        self.r=residuo\n        self.c=correccion\n#------------------------------------------------------------------------------------------\nclass MoleculeNMR:\n    def __init__(self, name,cpu_time,elapse_time,cpu_time_nmr,elapse_time_nmr,rmsd,mol_id,chk):\n        self.atoms = []\n        self.i = name\n        self.n = 0\n        self.ct=cpu_time\n        self.et=elapse_time\n        self.ct_nmr=cpu_time_nmr\n        self.et_nmr=elapse_time_nmr\n        self.rmsd=rmsd\n        self.im=mol_id\n        self.chk=chk\n    def add_atom(self, atom):\n        self.atoms.append(atom)\n        natoms=len(self.atoms)\n        self.n = natoms\n    def __repr__(self):\n        self=sorted(self, key=lambda atomm: atomm.s) \n#------------------------------------------------------------------------------------------\ndef flotante(variable):\n    try:\n        float(variable)\n        return True\n    except:\n        return False\n\ndef extrac_time(lin):\n    (d,h,m,s)=(int(lin[3]), int(lin[5]), int(lin[7]), float(lin[9]))\n    return (d,h,m,s)\n\ndef from_reader(txt, out, mol_id):\n    oslist, otlist=[], []\n    time=0\n    timecpu=(0,0,0,0)\n    timelaps=(0,0,0,0)\n    timecpu_nmr=(0,0,0,0)\n    timelaps_nmr=(0,0,0,0)\n    fl=0\n    chk=0\n    with open(out, 'r') as f2:    #abre el out\n        print(\"isotropic, line 56\", out)\n        for line in f2:\n            line = line.strip()\n            lin = line.split()\n            os = 'X'\n            if \"#\" and \"OPT\" and \"Geom=Check\" in line: \n                chk=1\n            if \"Isotropic\" in line and len(lin)==8:\n                fl=1\n                ot=float(lin[4])\n                os=str(lin[1])\n                oslist.append(os) #appendiza simbolo del atomo\n                otlist.append(ot) #appendiza las valor isotropico\n            if \"Job cpu time:\" in line and fl==0: timecpu=extrac_time(lin)\n            if \"Elapsed time:\" in line and fl==0: \n                lin.insert(0,\"-\")\n                timelaps=extrac_time(lin)\n            if \"Job cpu time:\" in line and fl==1: timecpu_nmr=extrac_time(lin)\n            if \"Elapsed time:\" in line and fl==1: \n                lin.insert(0,\"-\")\n                timelaps_nmr=extrac_time(lin)\n    #TERMINACIONNNNN\n    if fl==0:\n        Terminacin ()\n    #TERMINACIONNN\n\n    nz,fl=0,0\n    with open(txt, 'r') as f:  #txt\n        for line in f:\n            line = line.strip()\n            lin = line.split()\n            if fl == 0:\n                name=line\n                mol0=MoleculeNMR(name,timecpu,timelaps,timecpu_nmr,timelaps_nmr,0.0,mol_id,chk)\n                fl=1\n            if len(lin)>1:\n                if flotante(lin[1])==True or \"=\" in line or \"Nan\" in line:\n                    nz=nz+1\n                    s=str(lin[0])\n                    ex=str(lin[1])\n                    #if s ==\"H\" or s==\"C\":\n                    ai=AtomNMR(nz,s,ex,0.0,0.0,0.0)\n                    mol0.add_atom(ai)\n    for i, iatom in enumerate(mol0.atoms):   \n        if oslist[i] != iatom.s:\n            print('-------------------------ERROR!!',mol0.im)\n            print(oslist[i],iatom.s)\n        else:\n            iatom.t = otlist[i]\n        #print(iatom.s,iatom.e,iatom.t,iatom.r,iatom.c)\n    mol1 = filter_data(mol0)\n    for i, iatom in enumerate(mol1.atoms):\n        if iatom.s == \"H\" and iatom.e > 15:\n            sys.exit(\"Error\")\n    return {'mol':mol1}\n#----------------------------------------------------------------------------------------------\ndef filter_data(mol0): \n    av,ex,iso,s,nz,nn=[],[],[],[],[],[] #l\n    is_v=-200\n    name=\"\"\n    mol1=MoleculeNMR(mol0.i,mol0.ct,mol0.et,mol0.ct_nmr,mol0.et_nmr,mol0.rmsd,mol0.im,mol0.chk)\n    for i,iatom in enumerate(mol0.atoms):\n        ex.append(iatom.e)\n        iso.append(iatom.t)\n        s.append(iatom.s)\n        nn.append(iatom.nz)\n    for j in nn:\n        i=j-1\n        if ex[i]==\"Nan\":pass\n        #---------prueva\n        elif \"=\" in ex[i]:\n            va=int(ex[i].split(\"=\")[1])\n            valor=ex[va-1]\n            if flotante(valor)==False:\n                sys.exit(\"Equivocacion en el =\")\n        #---------------\n        else:\n            #print(nn[i],\"exp:\",ex[i],\"Iso:\",iso[i],s[i])\n            av.append(iso[i])\n            nz.append(nn[i])\n            n1=nn\n            for jj in n1:\n                ii=jj-1\n                if \"=\" in ex[ii]:\n                    exj=ex[ii].split(\"=\")[1]\n                    if int(exj) == int(j):\n                        av.append(iso[ii])\n                        nz.append(nn[ii])\n                        if s[i]!= s[ii]:\n                            sys.exit(\"Error\")\n            is_v=sum(av)/len(av)\n            is_v=round(is_v, 4)\n            for ii in range(len(nz)):\n                    name=name+str(nz[ii])+\",\"\n            a=AtomNMR(name[:-1],s[i],float(ex[i]),is_v,0.0,0.0)  \n            av,nz=[],[]\n            name=\"\"\n            mol1.add_atom(a)\n    return mol1\n\n#------------------------------------------------MAIN------------MAIN------MAIN-----------\ndef molecules_data(path1,path2):\n    filesout = []\n    filestxt = []\n    namemol =[]\n    moleculeout=[] \n    os.chdir(path1)\n    for iifile in glob.glob(\"*.out\"): \n        mol = os.path.splitext(os.path.basename(iifile))[0]\n        path_out = path1 + \"/\" +iifile\n        filesout.append(path_out)\n        namemol.append(mol)\n    os.chdir(path2)\n    if len(glob.glob(\"*.dnmr2\"))==1: \n        dnmr=[str(glob.glob(\"*.dnmr2\")[0]) for i in range(len(filesout))]\n    else: \n        dnmr=glob.glob(\"*.dnmr2\")\n    for ifile in dnmr:\n        # mol = os.path.splitext(os.path.basename(ifile))[0]\n        path_txt = path2 + \"/\" +ifile\n        filestxt.append(path_txt)\n        # namemol.append(mol)\n    filesout.sort()\n    filestxt.sort()\n    namemol.sort()\n    if len(filesout) != len(filestxt):\n        print(\"Missing files\")\n        print(filesout,len(filesout))\n        print(filestxt,len(filestxt))\n        sys.exit(1)\n    for i, j, k in zip(filestxt,filesout,namemol):\n        reader=from_reader(i, j, k)\n        molx = reader['mol']\n        moleculeout.extend([molx])    \n    return moleculeout\n#------------------------------------------------FILTRAR\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nmrutils/isotropicreader.py b/nmrutils/isotropicreader.py
--- a/nmrutils/isotropicreader.py	
+++ b/nmrutils/isotropicreader.py	
@@ -52,7 +52,7 @@
     (d,h,m,s)=(int(lin[3]), int(lin[5]), int(lin[7]), float(lin[9]))
     return (d,h,m,s)
 
-def from_reader(txt, out, mol_id):
+def from_reader(txt, out, mol_id,glist):
     oslist, otlist=[], []
     time=0
     timecpu=(0,0,0,0)
@@ -85,7 +85,7 @@
                 timelaps_nmr=extrac_time(lin)
     #TERMINACIONNNNN
     if fl==0:
-        Terminacin ()
+        terminacion(out,glist)
     #TERMINACIONNN
 
     nz,fl=0,0
@@ -193,7 +193,7 @@
         print(filestxt,len(filestxt))
         sys.exit(1)
     for i, j, k in zip(filestxt,filesout,namemol):
-        reader=from_reader(i, j, k)
+        reader=from_reader(i, j, k,filesout)
         molx = reader['mol']
         moleculeout.extend([molx])    
     return moleculeout
